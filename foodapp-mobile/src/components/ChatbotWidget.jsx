import React, { useState, useRef, useEffect } from "react";
import { 
  View, 
  StyleSheet, 
  TouchableOpacity, 
  Text, 
  Modal, 
  TextInput, 
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator
} from "react-native";
import { usePathname } from "expo-router";

export default function ChatbotWidget() {
  const pathname = usePathname();
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin ch√†o! T√¥i l√† AI Assistant c·ªßa FoodApp. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
      isBot: true,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [conversationId, setConversationId] = useState(null);
  const scrollViewRef = useRef(null);

  // Botpress configuration - L·∫•y t·ª´ file config c·ªßa web
  const BOT_ID = "9c7e30ed-a703-45ee-b229-986c7ce50038";
  const CLIENT_ID = "c7c085ad-0340-4613-8ffe-c669a1862745";
  
  // Simple pattern matching chatbot (fallback khi kh√¥ng connect ƒë∆∞·ª£c Botpress)
  const getBotResponse = (userText) => {
    const text = userText.toLowerCase();
    
    // Greeting
    if (text.match(/^(xin ch√†o|ch√†o|hello|hi|hey)/i)) {
      return "Xin ch√†o! T√¥i l√† AI Assistant c·ªßa FoodApp. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüç± T√¨m hi·ªÉu v·ªÅ th·ª±c ƒë∆°n\nüì¶ Theo d√µi ƒë∆°n h√†ng\nüí∞ Xem gi√° v√† g√≥i c∆∞·ªõc\nüìû Li√™n h·ªá h·ªó tr·ª£\n\nB·∫°n c·∫ßn t√¥i gi√∫p g√¨?";
    }
    
    // Menu/Food
    if (text.match(/th·ª±c ƒë∆°n|m√≥n ƒÉn|menu|ƒë·ªì ƒÉn|m√≥n/i)) {
      return "FoodApp c√≥ nhi·ªÅu g√≥i th·ª±c ƒë∆°n ƒëa d·∫°ng:\n\nü•ó G√≥i FIT - Tr∆∞a & T·ªëi: 650,000ƒë\nüçΩÔ∏è G√≥i FULL - 3 b·ªØa/ng√†y: 825,000ƒë\nü•ô G√≥i SLIM - Kh√¥ng tinh b·ªôt: 600,000ƒë\nüí™ G√≥i MEAT - TƒÉng c∆°: 950,000ƒë\n\nB·∫°n c√≥ th·ªÉ xem chi ti·∫øt trong app ho·∫∑c li√™n h·ªá 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n!";
    }
    
    // Order tracking
    if (text.match(/ƒë∆°n h√†ng|order|theo d√µi|ki·ªÉm tra ƒë∆°n/i)) {
      return "ƒê·ªÉ ki·ªÉm tra ƒë∆°n h√†ng, b·∫°n c√≥ th·ªÉ:\n\n1Ô∏è‚É£ V√†o m·ª•c 'ƒê∆°n h√†ng' trong app\n2Ô∏è‚É£ Xem tr·∫°ng th√°i v√† l·ªãch s·ª≠ ƒë∆°n h√†ng\n3Ô∏è‚É£ Li√™n h·ªá hotline: 1900-xxxx n·∫øu c·∫ßn h·ªó tr·ª£\n\nB·∫°n c·∫ßn th√™m th√¥ng tin g√¨ kh√¥ng?";
    }
    
    // Price
    if (text.match(/gi√°|price|bao nhi√™u|chi ph√≠|ph√≠/i)) {
      return "Gi√° c√°c g√≥i FoodApp:\n\nüíµ G√≥i FIT (Tr∆∞a-T·ªëi): 650,000ƒë/tu·∫ßn\nüíµ G√≥i FULL (3 b·ªØa): 825,000ƒë/tu·∫ßn\nüíµ G√≥i SLIM: 600,000ƒë/tu·∫ßn\nüíµ G√≥i MEAT: 950,000ƒë/tu·∫ßn\n\n‚ú® Mi·ªÖn ph√≠ giao h√†ng trong n·ªôi th√†nh!\n\nB·∫°n mu·ªën ƒë·∫∑t g√≥i n√†o?";
    }
    
    // Contact/Support
    if (text.match(/li√™n h·ªá|contact|hotline|support|h·ªó tr·ª£|help/i)) {
      return "üìû Li√™n h·ªá FoodApp:\n\nHotline: 1900-xxxx\nEmail: support@foodapp.vn\nGi·ªù l√†m vi·ªác: 8:00 - 22:00 (T2-CN)\n\nƒê·ªôi ng≈© ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä";
    }
    
    // Delivery
    if (text.match(/giao h√†ng|ship|delivery|v·∫≠n chuy·ªÉn/i)) {
      return "üöö Ch√≠nh s√°ch giao h√†ng:\n\n‚úÖ Giao h√†ng 2 l·∫ßn/ng√†y\n‚úÖ Mi·ªÖn ph√≠ trong n·ªôi th√†nh\n‚úÖ ƒê√≥ng g√≥i c·∫©n th·∫≠n, gi·ªØ nhi·ªát\n‚úÖ Shipper th√¢n thi·ªán, chuy√™n nghi·ªáp\n\nB·∫°n mu·ªën bi·∫øt th√™m g√¨ v·ªÅ giao h√†ng kh√¥ng?";
    }
    
    // Payment
    if (text.match(/thanh to√°n|payment|pay|ti·ªÅn/i)) {
      return "üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n:\n\n‚úÖ COD (Ti·ªÅn m·∫∑t)\n‚úÖ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n‚úÖ PayOS (Qu√©t QR)\n‚úÖ V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)\n\nT·∫•t c·∫£ ƒë·ªÅu an to√†n v√† ti·ªán l·ª£i!";
    }
    
    // Thanks
    if (text.match(/c·∫£m ∆°n|thank|thanks|c√°m ∆°n/i)) {
      return "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! üòä\n\nN·∫øu c·∫ßn th√™m th√¥ng tin, ƒë·ª´ng ng·∫°i h·ªèi t√¥i nh√©. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! üåü";
    }
    
    // Default
    return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. ü§î\n\nB·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n‚Ä¢ Th·ª±c ƒë∆°n & g√≥i c∆∞·ªõc\n‚Ä¢ ƒê∆°n h√†ng\n‚Ä¢ Giao h√†ng\n‚Ä¢ Thanh to√°n\n‚Ä¢ Li√™n h·ªá h·ªó tr·ª£\n\nHo·∫∑c g·ªçi hotline 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp!";
  };

  const sendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: inputText.trim(),
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText("");
    setIsLoading(true);

    // Simulate bot thinking delay
    setTimeout(() => {
      const botResponse = getBotResponse(userMessage.text);
      
      const botMessage = {
        id: Date.now() + 1,
        text: botResponse,
        isBot: true,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
      setIsLoading(false);
      
      setTimeout(() => {
        scrollViewRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }, 800); // Delay 800ms ƒë·ªÉ gi·ªëng bot th·∫≠t ƒëang suy nghƒ©
  };

  useEffect(() => {
    if (isOpen) {
      setTimeout(() => {
        scrollViewRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [isOpen, messages]);

  // ·∫®n chatbot ·ªü trang login v√† register
  const hiddenRoutes = ['/login', '/register', '/index'];
  const shouldHide = hiddenRoutes.includes(pathname);

  if (shouldHide) {
    return null;
  }

  return (
    <>
      {/* Floating Chat Button */}
      <TouchableOpacity
        style={styles.floatingButton}
        onPress={() => setIsOpen(true)}
        activeOpacity={0.8}
      >
        <Text style={styles.buttonText}>üí¨</Text>
      </TouchableOpacity>

      {/* Chat Modal */}
      <Modal
        visible={isOpen}
        animationType="slide"
        transparent={false}
        onRequestClose={() => setIsOpen(false)}
      >
        <KeyboardAvoidingView 
          style={styles.modalContainer}
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          keyboardVerticalOffset={0}
        >
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.headerTitle}>ü§ñ AI Assistant</Text>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setIsOpen(false)}
            >
              <Text style={styles.closeText}>‚úï</Text>
            </TouchableOpacity>
          </View>

          {/* Messages */}
          <ScrollView 
            ref={scrollViewRef}
            style={styles.messagesContainer}
            contentContainerStyle={styles.messagesContent}
          >
            {messages.map((msg) => (
              <View
                key={msg.id}
                style={[
                  styles.messageBubble,
                  msg.isBot ? styles.botBubble : styles.userBubble
                ]}
              >
                <Text style={[
                  styles.messageText,
                  msg.isBot ? styles.botText : styles.userText
                ]}>
                  {msg.text}
                </Text>
                <Text style={styles.timestamp}>
                  {msg.timestamp.toLocaleTimeString('vi-VN', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                </Text>
              </View>
            ))}
            {isLoading && (
              <View style={[styles.messageBubble, styles.botBubble]}>
                <ActivityIndicator size="small" color="#007bff" />
                <Text style={[styles.messageText, styles.botText]}>
                  ƒêang suy nghƒ©...
                </Text>
              </View>
            )}
          </ScrollView>

          {/* Input */}
          <View style={styles.inputContainer}>
            <TextInput
              style={styles.input}
              value={inputText}
              onChangeText={setInputText}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              placeholderTextColor="#999"
              multiline
              maxLength={500}
              onSubmitEditing={sendMessage}
            />
            <TouchableOpacity
              style={[styles.sendButton, !inputText.trim() && styles.sendButtonDisabled]}
              onPress={sendMessage}
              disabled={!inputText.trim() || isLoading}
            >
              <Text style={styles.sendButtonText}>‚û§</Text>
            </TouchableOpacity>
          </View>
        </KeyboardAvoidingView>
      </Modal>
    </>
  );
}

const styles = StyleSheet.create({
  floatingButton: {
    position: "absolute",
    bottom: 20,
    right: 20,
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: "#007bff",
    justifyContent: "center",
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 8,
    zIndex: 9999,
  },
  buttonText: {
    fontSize: 28,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#f5f5f5",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 16,
    backgroundColor: "#007bff",
    borderBottomWidth: 1,
    borderBottomColor: "#0056b3",
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "700",
    color: "#fff",
  },
  closeButton: {
    padding: 8,
  },
  closeText: {
    fontSize: 24,
    color: "#fff",
    fontWeight: "600",
  },
  messagesContainer: {
    flex: 1,
    backgroundColor: "#f5f5f5",
  },
  messagesContent: {
    padding: 16,
    paddingBottom: 8,
  },
  messageBubble: {
    maxWidth: "80%",
    padding: 12,
    borderRadius: 16,
    marginBottom: 12,
  },
  botBubble: {
    alignSelf: "flex-start",
    backgroundColor: "#fff",
    borderBottomLeftRadius: 4,
  },
  userBubble: {
    alignSelf: "flex-end",
    backgroundColor: "#007bff",
    borderBottomRightRadius: 4,
  },
  messageText: {
    fontSize: 15,
    lineHeight: 20,
    marginBottom: 4,
  },
  botText: {
    color: "#333",
  },
  userText: {
    color: "#fff",
  },
  timestamp: {
    fontSize: 11,
    color: "#999",
    marginTop: 4,
  },
  inputContainer: {
    flexDirection: "row",
    padding: 12,
    backgroundColor: "#fff",
    borderTopWidth: 1,
    borderTopColor: "#e0e0e0",
    alignItems: "flex-end",
  },
  input: {
    flex: 1,
    minHeight: 40,
    maxHeight: 100,
    backgroundColor: "#f5f5f5",
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 10,
    marginRight: 8,
    fontSize: 15,
    color: "#333",
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: "#007bff",
    justifyContent: "center",
    alignItems: "center",
  },
  sendButtonDisabled: {
    backgroundColor: "#ccc",
  },
  sendButtonText: {
    color: "#fff",
    fontSize: 20,
    fontWeight: "600",
  },
});
